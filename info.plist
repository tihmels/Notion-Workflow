<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string></string>
	<key>category</key>
	<string>Productivity</string>
	<key>connections</key>
	<dict>
		<key>576D674D-ADE0-4B23-BA8B-B9EAF7800B01</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8C0BF2AD-13DE-4725-BAD9-222896B08C5B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>611DA820-9ABB-469A-9BE4-381A72E16AC3</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>08847631-8B9D-47EA-A0DA-AD31F423B422</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>8C0BF2AD-13DE-4725-BAD9-222896B08C5B</key>
		<array/>
		<key>B1A21E4D-476D-434D-88C5-06D00C07F62E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8C0BF2AD-13DE-4725-BAD9-222896B08C5B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>576D674D-ADE0-4B23-BA8B-B9EAF7800B01</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Open new page after creation</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>BE9862AA-88A7-465F-B84F-A3A67D562406</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>ECFE8F47-C0F2-47EC-97E4-A6C369B10B92</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>C16B5077-FCFB-4DBA-98B7-88C6A6FF6CE2</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Open new page after creation</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>C16B5077-FCFB-4DBA-98B7-88C6A6FF6CE2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>ECFE8F47-C0F2-47EC-97E4-A6C369B10B92</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>ECFE8F47-C0F2-47EC-97E4-A6C369B10B92</key>
		<array/>
	</dict>
	<key>createdby</key>
	<string></string>
	<key>description</key>
	<string></string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Notion Page</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>setup</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>Fetch and Configure Notion Databases</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>611DA820-9ABB-469A-9BE4-381A72E16AC3</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>source venv/bin/activate

python3 setup.py</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>11</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>08847631-8B9D-47EA-A0DA-AD31F423B422</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>page</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>import json
import os
import sys

CONFIG_FILE = "databases.json"

def load_config():
    """Load the databases.json file."""
    try:
        with open(CONFIG_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        print(json.dumps({
            "items": [{
                "title": "Error: databases.json not found",
                "subtitle": f"Ensure {CONFIG_FILE} exists in the script's directory.",
                "valid": False
            }]
        }))
        sys.exit(1)
    except json.JSONDecodeError:
        print(json.dumps({
            "items": [{
                "title": "Error: databases.json is not valid JSON",
                "subtitle": "Check the file for formatting issues.",
                "valid": False
            }]
        }))
        sys.exit(1)

def generate_script_filter_output(config):
    """Generate JSON output for Alfred's Script Filter."""
    items = []
    for database in config.get("databases", []):
        label = database.get("label", "Unknown Label")
        db_id = database.get("id", "Unknown ID")

        items.append({
            "title": label,
            "subtitle": f"Create a new page in the '{label}' database",
            "arg": db_id,      
            "autocomplete": label,
            "icon": {
                "path": "icon.png"
            }
        })

    if not items:
        items.append({
            "title": "No databases found in databases.json",
            "subtitle": "Ensure the file contains valid database entries.",
            "valid": False
        })

    return {"items": items}

def main():
    config = load_config()
    output = generate_script_filter_output(config)
    print(json.dumps(output))

if __name__ == "__main__":
    main()</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Select the database where the new page should be created</string>
				<key>title</key>
				<string>Create a new Notion page</string>
				<key>type</key>
				<integer>9</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>B1A21E4D-476D-434D-88C5-06D00C07F62E</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>source venv/bin/activate

ID="${1}"
DEFAULT_TITLE="Title"

if [ -z "$ID" ]; then
    echo "No database ID provided."
    exit 1
fi

if [ "${OPEN_NOTION:-}" = "true" ]; then
    python3 main.py page --id "$ID" --title "$DEFAULT_TITLE" --open
else
    python3 main.py page --id "$ID" --title "$DEFAULT_TITLE"
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>11</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>8C0BF2AD-13DE-4725-BAD9-222896B08C5B</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{query}</string>
				<key>passthroughargument</key>
				<true/>
				<key>variables</key>
				<dict>
					<key>OPEN_NOTION</key>
					<string>true</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>576D674D-ADE0-4B23-BA8B-B9EAF7800B01</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>source venv/bin/activate

ID="${1}"
DEFAULT_TITLE="Title"

if [ -z "$ID" ]; then
    echo "No template ID provided."
    exit 1
fi

if [ "${OPEN_NOTION:-}" = "true" ]; then
    python3 main.py template --id "$ID" --title "$DEFAULT_TITLE" --open
else
    python3 main.py template --id "$ID" --title "$DEFAULT_TITLE"
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>11</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>ECFE8F47-C0F2-47EC-97E4-A6C369B10B92</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>template</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string></string>
				<key>script</key>
				<string>import json
import os
import sys

CONFIG_FILE = "templates.json"

def load_config():
    """Load the templates.json file."""
    try:
        with open(CONFIG_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        print(json.dumps({
            "items": [{
                "title": "Error: templates.json not found",
                "subtitle": f"Ensure {CONFIG_FILE} exists in the script's directory.",
                "valid": False
            }]
        }))
        sys.exit(1)
    except json.JSONDecodeError:
        print(json.dumps({
            "items": [{
                "title": "Error: templates.json is not valid JSON",
                "subtitle": "Check the file for formatting issues.",
                "valid": False
            }]
        }))
        sys.exit(1)

def generate_script_filter_output(config):
    """Generate JSON output for Alfred's Script Filter."""
    items = []
    for tmpl in config.get("templates", []):
        label = tmpl.get("label", "Unknown Template")
        tmpl_id = tmpl.get("id", "")

        items.append({
            "title": label,
            "subtitle": f"Create a new page using the {label} template",
            "arg": tmpl_id,
            "autocomplete": label,
            "icon": {"path": "icon.png"}
        })

    if not items:
        items.append({
            "title": "No templates found",
            "subtitle": f"Check {CONFIG_FILE} for valid entries.",
            "valid": False
        })

    return {"items": items}

def main():
    config = load_config()
    output = generate_script_filter_output(config)
    print(json.dumps(output))

if __name__ == "__main__":
    main()</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string></string>
				<key>title</key>
				<string>Create a new Notion page using template</string>
				<key>type</key>
				<integer>9</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>BE9862AA-88A7-465F-B84F-A3A67D562406</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{query}</string>
				<key>passthroughargument</key>
				<true/>
				<key>variables</key>
				<dict>
					<key>OPEN_NOTION</key>
					<string>true</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>C16B5077-FCFB-4DBA-98B7-88C6A6FF6CE2</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>A powerful workflow that integrates with the Notion API to create pages in Notion databases effortlessly. Supports customizable templates, seamless configuration, and efficient page generation—all directly from Alfred. Perfect for enhancing your productivity and streamlining your Notion workflow.</string>
	<key>uidata</key>
	<dict>
		<key>08847631-8B9D-47EA-A0DA-AD31F423B422</key>
		<dict>
			<key>xpos</key>
			<real>425</real>
			<key>ypos</key>
			<real>40</real>
		</dict>
		<key>576D674D-ADE0-4B23-BA8B-B9EAF7800B01</key>
		<dict>
			<key>xpos</key>
			<real>300</real>
			<key>ypos</key>
			<real>350</real>
		</dict>
		<key>611DA820-9ABB-469A-9BE4-381A72E16AC3</key>
		<dict>
			<key>xpos</key>
			<real>100</real>
			<key>ypos</key>
			<real>40</real>
		</dict>
		<key>8C0BF2AD-13DE-4725-BAD9-222896B08C5B</key>
		<dict>
			<key>xpos</key>
			<real>430</real>
			<key>ypos</key>
			<real>205</real>
		</dict>
		<key>B1A21E4D-476D-434D-88C5-06D00C07F62E</key>
		<dict>
			<key>xpos</key>
			<real>95</real>
			<key>ypos</key>
			<real>205</real>
		</dict>
		<key>BE9862AA-88A7-465F-B84F-A3A67D562406</key>
		<dict>
			<key>xpos</key>
			<real>100</real>
			<key>ypos</key>
			<real>420</real>
		</dict>
		<key>C16B5077-FCFB-4DBA-98B7-88C6A6FF6CE2</key>
		<dict>
			<key>xpos</key>
			<real>305</real>
			<key>ypos</key>
			<real>580</real>
		</dict>
		<key>ECFE8F47-C0F2-47EC-97E4-A6C369B10B92</key>
		<dict>
			<key>xpos</key>
			<real>435</real>
			<key>ypos</key>
			<real>420</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>default</key>
				<string></string>
				<key>placeholder</key>
				<string></string>
				<key>required</key>
				<true/>
				<key>trim</key>
				<true/>
			</dict>
			<key>description</key>
			<string></string>
			<key>label</key>
			<string>NOTION_TOKEN</string>
			<key>type</key>
			<string>textfield</string>
			<key>variable</key>
			<string>NOTION_TOKEN</string>
		</dict>
	</array>
	<key>variables</key>
	<dict>
		<key>PAGE_ID</key>
		<string>1482cd0cca794bda9341dea90c9dd5a3</string>
		<key>TASK_DB_ID</key>
		<string>1482cd0cca794bda9341dea90c9dd5a3</string>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string></string>
	<key>webaddress</key>
	<string></string>
</dict>
</plist>
